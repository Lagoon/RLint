h1. Gem RLint - RoR Lagoon® Interface Connector

Rlint is a connector module to LagoonSecurity application, which is an authentication/autorization system developed by XLM - Innovation & Technology. 
It allows you to easily manage your applications authentication and autorization.

h2. Getting Started

Rlint is a library to connect your application with XLM - Innovation & Technology Lagoon® Application RESTful API.

h3. Depedencies

* HttParty v0.7.8
* Rails v3.0.9
* Rspec v2.6.0
* rubygems v >= 1.3.4

h3. Instalation

First add the gem to your development environment and run the @bundle@ command to install it.

@gem "rlagoon"@

h3. Generate Lagoon configuration file

To add Rlint configuration file to your @/config/initializers/@ folder run @rails g rlagoon:config@.
Update config options with credentials and uri provided by XLM - Innovation & Technology.

h3. How to use?

After add lagoon configuration file to @/config/initializers@ folder you can access "load_lagoon" helper method inside your controllers.
You can add this before_filter to fetch always lagoon object on your ApplicationController.

<pre>
before_filter :current_lagoon
	
def current_lagoon
	@lagoon = load_lagoon
end
</pre>

In case of your application has contexts you need to send it with option @{:context => "name_context"}@ on "load_lagoon" helper.
Example: @load_lagoon({:context => "your_context"})@

You can use rlint to automatically authorize your controller actions. To use this function you can use "lagoon_authorization" helper method. This method authorize all of controller actions with "controller_name" and "action_name". In case of user try access non-authorized action, rlint will raise AccessDennied exception (see "Handle exceptions" section).
Example: @lagoon_authorization(user_id, {:context => "your_context"})@

<pre>
def current_lagoon
	@lagoon = load_lagoon
	lagoon_authorization(user_id)
end
</pre>

h2. Operations

List or Rlint operations you can use.
Note: "*" means that attribute is mandatory.

If any problem was detected on request will be raise an Exception (see section "Handle exceptions").

h3. Application operations

h4. Show application "show_application()"

Show your environment/application information.
This method output your environment/application information.
Output Example:

<pre>
{:application =>
	{:id=>5, 
	 :application=>"application_name", 
	 :modules=>["module_1","module_2"], 
	 :activation_url=>"http://environment.activation.url.com", 
	 :description=>"Environment description", 
	 :name=>"environment_name"}
}
</pre>

h4. Update application "update_application(name,activation_url = nil,description = nil)"

Update your environment/application information.
This method expects 4 attributes:

* name* (string): application name.
* activation_url (string): environment activation URL.
* url (string): environment url.
* description (text): environment description.

h3. Context operations

h4. Create context "create_context(context_name,activation_url = nil, url = nil, description = nil, copy_context = nil)"

Create new context for your application
This method expects 5 attributes:

* name_context* (string): context name.
* activation_url (string): context activation URL.
* url (string): context URL.
* description (text): context description.
* copy_context (boolean): copy profiles from default context (true) or configure profiles later on Lagoon user interface (false).

This method output your new context information.
Output Example:

<pre>
{:context =>
	{:id=>470,
	 :name=>"context_name",
	 :profiles=>
		{"profile_1"=>{:id=>959, :description=>"Profile Description"},
		 "profile_2"=>{:id=>960, :description=>"Profile 2 Description"}
		},
	 :activation_url=>"http://context.activation.url/activations",
	 :description=>"Context Description",
	 :url=>"http://context.url.com"
	}
}
</pre>

h4. Show context "show_context(context_name)"

Show context information.
This method expects 1 attribute:

* name_context* (string): context name.

This method output context information.
Output Example:

<pre>
{:context =>
	{:id=>470,
	 :name=>"context_name",
	 :profiles=>
		{"profile_1"=>{:id=>959, :description=>"Profile Description"},
		 "profile_2"=>{:id=>960, :description=>"Profile 2 Description"}
		},
	 :activation_url=>"http://context.activation.url/activations",
	 :description=>"Context Description",
	 :url=>"http://context.url.com"
	}
}
</pre>

h4. List contexts "contexts()"

List all environment contexts. 
This method output all environment contexts information. 
Output Example:

<pre>
{:contexts => 
	{"id_context_1"=> 
		{:id=>13, 
		 :name=>"default", 
		 :profiles=> 
			{"profile_1"=> {:id=>64, :description=>"Profile 1 description"}, 
		 	 "profile_2"=> {:id=>63, :description=>"Partner Teste"}}, 
		 :activation_url=>"", 
		 :description=>"Context 1 description", 
		 :url=>""}
	"id_context_2" =>
		{:id=>13, 
	 	 :name=>"default", 
	 	 :profiles=>
			{"profile_1"=> {:id=>64, :description=>"Profile 1 description"}, 
	 	 	 "profile_2"=> {:id=>63, :description=>"Partner Teste"}}, 
	 	 :activation_url=>"", 
	 	 :description=>"Context 2 description", 
	 	 :url=>""}
	}
}
</pre>

h4. Update context "update_context(context_name,new_name,activation_url = nil, url = nil, description = nil)"

Update context of your application
This method expects 5 attributes:

* context_name* (string): actual context name. 
* name_context* (string): new context name. 
* activation_url (string): context activation URL. 
* url (string): context URL. 
* description (text): context description. 

This method output context information updated. 
Output Example:

<pre>
{:context =>	
	{:id=>470, 
	 :name=>"name_updated", 
	 :profiles=>
		{"profile_1"=>{:id=>959, :description=>"Profile Description"}, 
		 "profile_2"=>{:id=>960, :description=>"Profile 2 Description"}
		}, 
	 :activation_url=>"http://context.activation.url/activations", 
	 :description=>"Context Description", 
	 :url=>"http://context.url.com"
	}
}
</pre>

h4. Delete context "delete_context(context_name)"

Delete context of your application
This method expects 1 attribute:

* name_context* (string): context name. 

This method output operation success. 
Output example:
@{:success => true}@

h3. Permission operations

h4. Permission operations "permissions(id_u)"

Get user actual permissions from Lagoon®. 
This method expects 1 attribute: 

* id_u* (integer): user id.

This method output current user permissions. 
Output example:

<pre>
{"idi_manager_test"=>{:actions=>{"managers"=>{:action_points=>["index", "show"]}}}}
{:permissions =>{
		"idi_manager_test"=>{:actions => {"managers" => {:action_points => ["index", "show"]}}}
		}
}
</pre>

h3. Profile operations

h4. Profile operations "profiles()"

Get environment/application profiles. 
This method output all environment/application profiles. 
Output example:

<pre>
{:profiles =>{
		"profile_1"=>{:id=>64, :description=>"Profile 1 description"}, 
		"profile_2"=>{:id=>63, :description=>"Profile 2 description"}
		}
}
</pre>

h3. User operations

h4. Create user "create_user(login, email, name, ghost = false, profiles = nil)"

Create new user. 
This method expects 5 attributes:

* login* (string): user login. 
* email* (string): user email. 
* name* (string): user name. 
* ghost* (boolean): if your want create a user without send activation notification (true). 
* profiles (text): context description. 

This method output your new user information. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>false, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>"tokenassdasdwq2213123sadsx"
	} 
}
</pre>

h4. Show user "show_user(id_u)"

Show user information. 
This method expects 1 attribute: 

* u_id* (string): user id. 

This method output your user (u_id) information. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>false, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>nil
	} 
}
</pre>

h4. List users "users()"

List all users. 
This method output all users information. 
Output Example:

<pre>
{:users => 
	{"user_1_login"=>
		{:id=>164, 
		 :active=>false, 
		 :ghost=>false, 
		 :login=>"user_1_login", 
		 :name=>"User 1", 
		 :email=>"user_1@email.com", 
		 :profiles=>{
				"profile_1"=>{:id=>1113, :description=>"Profile 1 description"}
				}, 
		 :token=>nil
		}
	 "user_2_login"=>
		{:id=>164, 
		 :active=>false, 
		 :ghost=>false, 
		 :login=>"user_2_login", 
		 :name=>"User 2", 
		 :email=>"user_2@email.com", 
		 :profiles=>{
				"profile_2"=>{:id=>1113, :description=>"Profile 2 description"}
				}, 
		 :token=>nil}
	}
}
</pre>

h4. Update user "update_user(id_u, login, email, name, ghost = nil, profiles = nil)"

Update user information.
This method expects 5 attributes:

* id_u* (integer): user id. 
* login* (string): user login. 
* email* (string): user email. 
* name* (string): user name. 
* ghost* (boolean): if your want create a user without send activation notification (true). 
* profiles (text): context description. 


This method output user information updated. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>false, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name updated", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>nil
	} 
}
</pre>

h4. Register user "register(password,token)"

Register user via activation_url. 
This method expects 2 attributes: 

* password* (string): user password. 
* token* (string): token sent to user via activation email. 

This method output user information. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>true, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name updated", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>nil
	} 
}
</pre>

h4. Deactivate user "deactivation(id_u)"

Deactivate user account. 
This method expects 1 attribute: 

* id_u* (integer): user password. 

This method output user information. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>false, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name updated", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>nil
	} 
}
</pre>

h4. Activate user "activation(id_u)"

Activate user account. 
This method expects 1 attribute: 

* id_u* (integer): user password. 

This method output user information. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>true, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name updated", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>nil
	} 
}
</pre>

h4. Reactivate user "reactivation(id_u)"

Reactivate user account and send activation email. 
This method expects 1 attribute: 

* id_u* (integer): user password. 

This method output user information. 
Output Example:

<pre>
{:user =>	
	{:id=>160, 
	 :active=>false, 
	 :ghost=>false, 
	 :login=>"login", 
	 :name=>"user name updated", 
	 :email=>"user@email.com", 
	 :profiles=>{
			"profile_1"=>{:id=>1097, :description=>"Profile description"}
				}, 
	 :token=>nil
	} 
}
</pre>

h4. Login "login(login,password)"

User login. 
This method expects 2 attributes: 

* login* (string): user login. 
* password* (string): user password. 

This method output user information and permissions.

<pre>
{:user=>{ 
		:id=>10, 
		:active=>true, 
		:ghost=>false, 
		:login=>"user@mail.com", 
		:name=>"name_user", 
		:email=>"user@mail.com",
		:profiles=>{"name_profile"=> 
						{:actions=>{
							"action_1"=>{:action_points=>["ap_1","ap2"]},
							"action_2"=>{:action_points=>["ap_1","ap2"]}, 
							}
					"name_profile_2"=>
						{:actions=>{
							"action_3"=>{:action_points=>["ap_1","ap2"]},
							"action_4"=>{:action_points=>["ap_1","ap2"]},
							}
						}
					}, 
		:last_login=>1326815905000
		}
}
</pre>

h4. Logout "logout(id_u)"

User logout. 
This method expects 1 attribute: 

* id_u* (integer): user id. 

This method output operation success. 
@{:success=> true}@


h2. Handle exceptions

	
h3. SanityProblem

If credentials present on config file, or first connection to Lagoon® fails, a Rlagoon::SanityProblem exception will be raised on application start.

h3. ClientError

If any problem was detected on client request (ex: wrong attributes sent) Lagoon® will sent a client error on http status code. Rlagoon will raise a Rlagoon::ClientError exception. You can catch this and modify it behavior in ApplicationController.

<pre>
class ApplicationController < ActionController::Base 
	rescue from Rlagoon::ClientError do |exception|
		redirect_to root_url, :alert => "some alert"
	end
end
</pre>

h3. ServerError

If any problem occur on server (ex: internal server error) Rlint will raise a Rlagoon::ServerError exception. You can catch this and modify it behavior in ApplicationController

<pre>
class ApplicationController < ActionController::Base 
	rescue from Rlagoon::ServerError do |exception|
		redirect_to root_url, :alert => "some alert"
	end
end
</pre>


h3. AccessDenied

If you user "load_authorization" helper method and current user cannot access some action, a Rlagoon::AccessDenied exception will be raised. You can catch this and modify it behavior in ApplicationController

<pre>
class ApplicationController < ActionController::Base
	rescue from Rlagoon::AccessDenied do |exception|
		redirect_to root_url, :alert => "some alert"
	end
end
</pre>

enjoy ;)

For more info, please visit LagoonSecurity website!
